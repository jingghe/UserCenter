#coding=utf-8
"""
Django settings for UserCenter project.

Generated by 'django-admin startproject' using Django 1.9.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import ConfigParser

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
conf = ConfigParser.ConfigParser()
conf.read(os.path.join(BASE_DIR, 'UserCenter.conf'))
MYSQL_HOST = conf.get('mysql', 'MYSQL_HOST')
MYSQL_PORT = conf.get('mysql', 'MYSQL_PORT')
MYSQL_USER = conf.get('mysql', 'MYSQL_USER')
MYSQL_PASS = conf.get('mysql', 'MYSQL_PASS')
MYSQL_DB = conf.get('mysql', 'MYSQL_DB')

LDAP_SERVER_IP = conf.get('ldap', 'LDAP_SERVER_IP')
LDAP_DOMAIN = conf.get('ldap', 'LDAP_DOMAIN')
LDAP_OU = conf.get('ldap', 'LDAP_OU')
LDAP_ADMIN = conf.get('ldap', 'LDAP_ADMIN')
LDAP_PASS = conf.get('ldap', 'LDAP_PASS')
gidNumber = conf.get('ldap', 'GIDNumber')


MAIL_HOST = conf.get('email', 'MAIL_HOST')
MAIL_PORT = conf.get('email', 'MAIL_PORT')
MAIL_USER = conf.get('email', 'MAIL_USER')
MAIL_PASS = conf.get('email', 'MAIL_PASS')
MAIL_SEND_HOST = conf.get('email', 'MAIL_SEND_HOST')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'jg!=0&hvw24gb_u*li@mdtsjnwlvg$%q)k1ga$nze6d$byo#8j'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'UsersControl',
    'Logs',
    'captcha',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'UserCenter.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'UserCenter.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

DATABASES = {
    'default': {
        #'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'ENGINE': 'django.db.backends.mysql',
        'NAME': MYSQL_DB,
        'USER': MYSQL_USER,
        'PASSWORD': MYSQL_PASS,
        'HOST': MYSQL_HOST,
        'PORT': MYSQL_PORT,
    }
}


###############Session#########################
SESSION_EXPIRE_AT_BROWSER_CLOSE=True

SESSION_SAVE_EVERY_REQUEST=True

SESSION_COOKIE_AGE=3600
###############Session########################
# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-Hans'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

#USE_TZ = True #输出UTC时间(格林尼治平均时间，即零时区)
USE_TZ = False #输出本地时间


STATIC_URL = '/static/'
#STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = (
    os.path.join(BASE_DIR,'static'),
)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

LOGIN_URL = '/login/'

AUTH_USER_MODEL = 'UsersControl.UserProfile' #修改为自己的auth模块

import ldap
from django_auth_ldap.config import LDAPSearch,PosixGroupType#导入LDAP model
AUTHENTICATION_BACKENDS = (
    'django_auth_ldap.backend.LDAPBackend',   # ldap认证
    'django.contrib.auth.backends.ModelBackend',# 本地默认的认证方式
)
AUTH_LDAP_SERVER_URI = LDAP_SERVER_IP # ldap服务器地址
AUTH_LDAP_BIND_DN = 'cn=%s,%s' % (LDAP_ADMIN, LDAP_DOMAIN)   # 可为空，也可以填写一个真实的ldap用户
AUTH_LDAP_BIND_PASSWORD = LDAP_PASS
AUTH_LDAP_USER_SEARCH = LDAPSearch('ou=%s,%s' % (LDAP_OU, LDAP_DOMAIN), ldap.SCOPE_SUBTREE, "(cn=%(user)s)")   #
# 第一个参数是搜索的范围
#AUTH_LDAP_USER_ATTR_MAP = {"username": "cn","email": "mail"} #从LDAP同步数据到本地数据库
AUTH_LDAP_ALWAYS_UPDATE_USER = True
AUTH_LDAP_GROUP_SEARCH = LDAPSearch(LDAP_DOMAIN, ldap.SCOPE_SUBTREE, "(objectClass=posixGroup)")
AUTH_LDAP_GROUP_TYPE = PosixGroupType(name_attr="cn") # 组的DN是cn=员工,ou=Group,dc=ldap,dc=ssotest,dc=net，所以type是cn



# ### log 配置部分BEGIN ### #

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {#日志格式化
        'simple': {
            'format': '%(levelname)s %(name)s %(asctime)s %(message)s'
        },
        'verbose': {
            'format': '%(levelname)s %(name)s %(asctime)s %(pathname)s %(module)s:%(funcName)s %(lineno)d %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'django_request':{
            'format': '%(levelname)s %(asctime)s %(pathname)s %(module)s %(lineno)d %(message)s status_code:%(status_code)d',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'django_db_backends':{
            'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%('
                      'levelname)s]- %(message)s',

            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
    },
    'handlers': {#处理器
        'console':{#输出到控制台
                    'level': 'INFO' if DEBUG else 'INFO',
                    'class': 'logging.StreamHandler',
                    'formatter': 'simple'
                },
        'django_log_file': {  # 输出到django_logfile.log
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'django_logs/django_logfile.log'),  # django日志路径
            'backupCount': 5,
            'maxBytes': 1024 * 1024 * 15,  # 15 MB
            'formatter': 'verbose'
        },
    },
        'loggers': {  # logging管理器
            'django': {
                'handlers': ['console', 'django_log_file'],
                'level': 'INFO' if DEBUG else 'INFO',
                'propagate': False,
            },
        }
}
